
==================== FINAL INTERFACE ====================
2016-09-10 22:29:11.552555 UTC

interface rhc_CuQgCuWWrTE7AdKLazyzq3:BEST 7103
  interface hash: 2324f581ac381fe3a1e6f3df2dfd9e46
  ABI hash: 5846fc0efd6dd6a74aefc6842a78cbe0
  export-list hash: ca330c3578890568bb9c25e367db6bdd
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 962af636f8e927040c7daa9c21457292
  sig of: Nothing
  used TH splices: False
  where
exports:
  BEST.testCase
  BEST.tshow
  BEST.vshow
  BEST.Case{BEST.Case}
  BEST.CoreType{BEST.ApplicationType BEST.ForAllType BEST.FunctionType BEST.TypeVariableType BEST.UnknownType}
  BEST.Expression{BEST.ApplicationExpression BEST.CaseExpression BEST.LambdaExpression BEST.LiteralExpression BEST.TypeExpression BEST.TypedExpression BEST.VariableExpression}
  BEST.Literal{BEST.CharLiteral BEST.FracLiteral BEST.IntLiteral BEST.StringLiteral}
  BEST.Namespace{BEST.Type BEST.TypeCons BEST.Value BEST.ValueCons}
  BEST.Pattern{BEST.DataPattern BEST.DefaultPattern BEST.LitPattern BEST.VariablePattern}
  BEST.VarID{BEST.VarID}
module dependencies:
package dependencies: base-4.8.2.0* ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:GHC.Generics
import  -/  base-4.8.2.0:Data.List 3f0782c8d4bf50eecefcd5ea1798aac8
import  -/  base-4.8.2.0:Data.OldList d8fd80b0e14aa085ce6219cd89dad356
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  integer-gmp-1.0.0.0:GHC.Integer.Type 371e90fe753f08ddedf0d2657a9ef5c4
94ca032c2fcfc6806206786387eb4ea6
  $fShowCase :: GHC.Show.Show BEST.Case
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BEST.Case
                  BEST.$fShowCase_$cshowsPrec
                  BEST.$fShowCase_$cshow2
                  BEST.$fShowCase_$cshowList -}
94ca032c2fcfc6806206786387eb4ea6
  $fShowCase_$cshow :: BEST.Expression -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U> -}
1e055c4d98656846ebffe833082033bc
  $fShowCase_$cshow1 :: BEST.Pattern -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U> -}
94ca032c2fcfc6806206786387eb4ea6
  $fShowCase_$cshow2 :: BEST.Case -> GHC.Base.String
  {- Arity: 1, Strictness: <S(SLL),1*U(1*U,A,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: BEST.Case ->
                 case w of ww { BEST.Case ww1 ww2 ww3 -> BEST.$w$cshow ww1 ww3 }) -}
94ca032c2fcfc6806206786387eb4ea6
  $fShowCase_$cshowList :: [BEST.Case] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ ls :: [BEST.Case] s :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ BEST.Case
                   (BEST.$fShowCase_$cshowsPrec GHC.Show.shows18)
                   ls
                   s) -}
94ca032c2fcfc6806206786387eb4ea6
  $fShowCase_$cshowsPrec ::
    GHC.Types.Int -> BEST.Case -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S(SLL),1*U(1*U,A,1*U)><L,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int w1 :: BEST.Case w2 :: GHC.Base.String ->
                 case w1 of ww { BEST.Case ww1 ww2 ww3 ->
                 BEST.$w$cshowsPrec ww1 ww3 w2 }) -}
9e0bcaef8cb54897bb47d75b79bc270c
  $fShowCoreType :: GHC.Show.Show BEST.CoreType
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BEST.CoreType
                  BEST.$fShowCoreType_$cshowsPrec
                  BEST.$fShowCoreType_$cshow
                  BEST.$fShowCoreType_$cshowList -}
9e0bcaef8cb54897bb47d75b79bc270c
  $fShowCoreType1 ::
    BEST.CoreType -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ x :: BEST.CoreType s :: GHC.Base.String[OneShot] ->
                 GHC.Base.++ @ GHC.Types.Char (BEST.$fShowCoreType_$cshow x) s) -}
9e0bcaef8cb54897bb47d75b79bc270c
  $fShowCoreType_$cshow :: BEST.CoreType -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U> -}
9e0bcaef8cb54897bb47d75b79bc270c
  $fShowCoreType_$cshowList :: [BEST.CoreType] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ ls :: [BEST.CoreType] s :: GHC.Base.String ->
                 GHC.Show.showList__ @ BEST.CoreType BEST.$fShowCoreType1 ls s) -}
9e0bcaef8cb54897bb47d75b79bc270c
  $fShowCoreType_$cshowsPrec ::
    GHC.Types.Int -> BEST.CoreType -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int x :: BEST.CoreType s :: GHC.Base.String ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (BEST.$fShowCoreType_$cshow x))
                   s) -}
94ca032c2fcfc6806206786387eb4ea6
  $fShowExpression :: GHC.Show.Show BEST.Expression
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BEST.Expression
                  BEST.$fShowExpression_$cshowsPrec
                  BEST.$fShowCase_$cshow
                  BEST.$fShowExpression_$cshowList -}
94ca032c2fcfc6806206786387eb4ea6
  $fShowExpression1 ::
    BEST.Expression -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ x :: BEST.Expression s :: GHC.Base.String[OneShot] ->
                 GHC.Base.++ @ GHC.Types.Char (BEST.$fShowCase_$cshow x) s) -}
94ca032c2fcfc6806206786387eb4ea6
  $fShowExpression_$cshowList :: [BEST.Expression] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ ls :: [BEST.Expression] s :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ BEST.Expression
                   BEST.$fShowExpression1
                   ls
                   s) -}
94ca032c2fcfc6806206786387eb4ea6
  $fShowExpression_$cshowsPrec ::
    GHC.Types.Int -> BEST.Expression -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int x :: BEST.Expression s :: GHC.Base.String ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n (BEST.$fShowCase_$cshow x))
                   s) -}
99048baa76fed3514bf88a7a158d46e1
  $fShowLiteral :: GHC.Show.Show BEST.Literal
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BEST.Literal
                  BEST.$fShowLiteral_$s$dmshowsPrec
                  BEST.$fShowLiteral_$cshow
                  BEST.$fShowLiteral_$cshowList -}
99048baa76fed3514bf88a7a158d46e1
  $fShowLiteral1 ::
    BEST.Literal -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ x :: BEST.Literal s :: GHC.Base.String[OneShot] ->
                 GHC.Base.++ @ GHC.Types.Char (BEST.$fShowLiteral_$cshow x) s) -}
99048baa76fed3514bf88a7a158d46e1
  $fShowLiteral_$cshow :: BEST.Literal -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ ds :: BEST.Literal ->
                 case ds of wild {
                   BEST.StringLiteral s -> GHC.Show.$fShow[]_$s$cshow1 s
                   BEST.CharLiteral c -> GHC.Show.$fShowChar_$cshow c
                   BEST.IntLiteral i -> GHC.Show.$fShowInteger_$cshow i
                   BEST.FracLiteral d -> GHC.Float.$fShowDouble_$cshow d }) -}
99048baa76fed3514bf88a7a158d46e1
  $fShowLiteral_$cshowList :: [BEST.Literal] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ ls :: [BEST.Literal] s :: GHC.Base.String ->
                 GHC.Show.showList__ @ BEST.Literal BEST.$fShowLiteral1 ls s) -}
99048baa76fed3514bf88a7a158d46e1
  $fShowLiteral_$s$dmshowsPrec ::
    GHC.Types.Int -> BEST.Literal -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (-1, True, False)
                (\ ds :: GHC.Types.Int x :: BEST.Literal s :: GHC.Base.String ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (BEST.$fShowLiteral_$cshow x))
                   s) -}
e6b24ad7d250539deceba50f3add5a61
  $fShowNamespace :: GHC.Show.Show BEST.Namespace
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BEST.Namespace
                  BEST.$fShowNamespace_$cshowsPrec
                  BEST.$fShowNamespace_$cshow
                  BEST.$fShowNamespace_$cshowList -}
1a3388d434d1fcd846769a7551a5ca69
  $fShowNamespace1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ValueCons"#) -}
106170905bfcb02cd4d5956d14184a8a
  $fShowNamespace2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TypeCons"#) -}
1b52dc55ce13102b715aa422442cb243
  $fShowNamespace3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Value"#) -}
9895b7819fb1d1fdd1b3ba9ff96dd8f1
  $fShowNamespace4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Type"#) -}
e6b24ad7d250539deceba50f3add5a61
  $fShowNamespace_$cshow :: BEST.Namespace -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: BEST.Namespace ->
                 BEST.$fShowNamespace_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
e6b24ad7d250539deceba50f3add5a61
  $fShowNamespace_$cshowList :: [BEST.Namespace] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ BEST.Namespace
                   BEST.$w$cshowsPrec1) -}
e6b24ad7d250539deceba50f3add5a61
  $fShowNamespace_$cshowsPrec ::
    GHC.Types.Int -> BEST.Namespace -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int w1 :: BEST.Namespace w2 :: GHC.Base.String ->
                 BEST.$w$cshowsPrec1 w1 w2) -}
1e055c4d98656846ebffe833082033bc
  $fShowPattern :: GHC.Show.Show BEST.Pattern
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BEST.Pattern
                  BEST.$fShowPattern_$cshowsPrec
                  BEST.$fShowCase_$cshow1
                  BEST.$fShowPattern_$cshowList -}
1e055c4d98656846ebffe833082033bc
  $fShowPattern1 ::
    BEST.Pattern -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ x :: BEST.Pattern s :: GHC.Base.String[OneShot] ->
                 GHC.Base.++ @ GHC.Types.Char (BEST.$fShowCase_$cshow1 x) s) -}
1e055c4d98656846ebffe833082033bc
  $fShowPattern_$cshowList :: [BEST.Pattern] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ ls :: [BEST.Pattern] s :: GHC.Base.String ->
                 GHC.Show.showList__ @ BEST.Pattern BEST.$fShowPattern1 ls s) -}
1e055c4d98656846ebffe833082033bc
  $fShowPattern_$cshowsPrec ::
    GHC.Types.Int -> BEST.Pattern -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int x :: BEST.Pattern s :: GHC.Base.String ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (BEST.$fShowCase_$cshow1 x))
                   s) -}
9e0bcaef8cb54897bb47d75b79bc270c
  $fShowVarID :: GHC.Show.Show BEST.VarID
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ BEST.VarID
                  BEST.$fShowVarID_$s$dmshowsPrec
                  BEST.$fShowVarID_$cshow
                  BEST.$fShowVarID_$cshowList -}
9e0bcaef8cb54897bb47d75b79bc270c
  $fShowVarID1 :: BEST.VarID -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ x :: BEST.VarID s :: GHC.Base.String[OneShot] ->
                 case x of ww { BEST.VarID ww1 ww2 ww3 ->
                 GHC.Base.++ @ GHC.Types.Char (BEST.$w$cshow1 ww1 ww3) s }) -}
9e0bcaef8cb54897bb47d75b79bc270c
  $fShowVarID_$cshow :: BEST.VarID -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,A,1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: BEST.VarID ->
                 case w of ww { BEST.VarID ww1 ww2 ww3 ->
                 BEST.$w$cshow1 ww1 ww3 }) -}
9e0bcaef8cb54897bb47d75b79bc270c
  $fShowVarID_$cshowList :: [BEST.VarID] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ ls :: [BEST.VarID] s :: GHC.Base.String ->
                 GHC.Show.showList__ @ BEST.VarID BEST.$fShowVarID1 ls s) -}
9e0bcaef8cb54897bb47d75b79bc270c
  $fShowVarID_$s$dmshowsPrec ::
    GHC.Types.Int -> BEST.VarID -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U(1*U,A,1*U)><L,1*U>,
     Unfolding: InlineRule (-1, True, False)
                (\ ds :: GHC.Types.Int x :: BEST.VarID s :: GHC.Base.String ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (BEST.$fShowVarID_$cshow x))
                   s) -}
72c94523541efc357dac8f64584f4ad5
  $s$dmshowList4 :: BEST.Case -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ w :: BEST.Case w1 :: GHC.Base.String[OneShot] ->
                 case w of ww { BEST.Case ww1 ww2 ww3 ->
                 BEST.$w$cshowsPrec ww1 ww3 w1 }) -}
94ca032c2fcfc6806206786387eb4ea6
  $w$cshow :: BEST.Pattern -> BEST.Expression -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ ww :: BEST.Pattern ww1 :: BEST.Expression ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (BEST.$fShowCase_$cshow1 ww)
                   (GHC.CString.unpackAppendCString#
                      " -> "#
                      (BEST.$fShowCase_$cshow ww1))) -}
9e0bcaef8cb54897bb47d75b79bc270c
  $w$cshow1 :: GHC.Base.String -> BEST.CoreType -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U><L,1*U>, Inline: [0] -}
94ca032c2fcfc6806206786387eb4ea6
  $w$cshowsPrec ::
    BEST.Pattern
    -> BEST.Expression -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 3, Strictness: <S,1*U><L,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ ww :: BEST.Pattern
                   ww1 :: BEST.Expression
                   w :: GHC.Base.String ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (BEST.$fShowCase_$cshow1 ww)
                   (GHC.CString.unpackAppendCString#
                      " -> "#
                      (GHC.Base.++ @ GHC.Types.Char (BEST.$fShowCase_$cshow ww1) w))) -}
e6b24ad7d250539deceba50f3add5a61
  $w$cshowsPrec1 ::
    BEST.Namespace -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: BEST.Namespace w1 :: GHC.Base.String ->
                 case w of wild {
                   BEST.Type -> GHC.Base.++ @ GHC.Types.Char BEST.$fShowNamespace4 w1
                   BEST.Value -> GHC.Base.++ @ GHC.Types.Char BEST.$fShowNamespace3 w1
                   BEST.TypeCons
                   -> GHC.Base.++ @ GHC.Types.Char BEST.$fShowNamespace2 w1
                   BEST.ValueCons
                   -> GHC.Base.++ @ GHC.Types.Char BEST.$fShowNamespace1 w1 }) -}
94ca032c2fcfc6806206786387eb4ea6
  data Case = Case BEST.Pattern [BEST.VarID] BEST.Expression
9e0bcaef8cb54897bb47d75b79bc270c
  data CoreType
    = TypeVariableType BEST.VarID
    | ApplicationType BEST.CoreType BEST.CoreType
    | FunctionType BEST.CoreType BEST.CoreType
    | ForAllType BEST.VarID BEST.CoreType
    | UnknownType
94ca032c2fcfc6806206786387eb4ea6
  data Expression
    = VariableExpression BEST.VarID
    | LiteralExpression BEST.Literal
    | ApplicationExpression BEST.Expression BEST.Expression
    | CaseExpression BEST.Expression [BEST.Case]
    | LambdaExpression BEST.VarID BEST.Expression
    | TypedExpression BEST.Expression BEST.CoreType
    | TypeExpression BEST.CoreType
99048baa76fed3514bf88a7a158d46e1
  data Literal
    = StringLiteral GHC.Base.String
    | CharLiteral GHC.Types.Char
    | IntLiteral GHC.Integer.Type.Integer
    | FracLiteral GHC.Types.Double
e6b24ad7d250539deceba50f3add5a61
  data Namespace = Type | Value | TypeCons | ValueCons
    Promotable
1e055c4d98656846ebffe833082033bc
  data Pattern
    = DataPattern BEST.VarID [BEST.Pattern]
    | VariablePattern BEST.VarID
    | LitPattern BEST.Literal
    | DefaultPattern
9e0bcaef8cb54897bb47d75b79bc270c
  data VarID = VarID GHC.Base.String BEST.Namespace BEST.CoreType
8276058e3e30af2ded0b26fac8d0fd2a
  testCase :: BEST.Expression
  {- Strictness: m4,
     Unfolding: (BEST.CaseExpression BEST.testCase34 BEST.testCase1) -}
8f53a07d01aad4736e578034dbcd122f
  testCase1 :: [BEST.Case]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ BEST.Case
                   BEST.testCase16
                   BEST.testCase2) -}
30957379f7bead34108a7ebdfe682af9
  testCase10 :: BEST.VarID
  {- Strictness: m,
     Unfolding: (BEST.VarID
                   BEST.testCase11
                   BEST.Type
                   BEST.UnknownType) -}
b7c1859ed6cffcbfde5f54ec80bb0ea8
  testCase11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "a"#) -}
36a29dda6f3e25e65785781819fc7939
  testCase12 :: BEST.CoreType
  {- Strictness: m1,
     Unfolding: (BEST.TypeVariableType BEST.testCase13) -}
ed826caa20d86c6720e449cbc27e38e5
  testCase13 :: BEST.VarID
  {- Strictness: m,
     Unfolding: (BEST.VarID
                   BEST.testCase14
                   BEST.TypeCons
                   BEST.UnknownType) -}
2b035a7a8b8dfb4c82cf6cfa8cb495bd
  testCase14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "List"#) -}
de7b586daee9173496957214e96378f7
  testCase15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Nil"#) -}
f359e87b0d177d95a582bf698dbbb6ba
  testCase16 :: BEST.Case
  {- Strictness: m,
     Unfolding: (BEST.Case
                   BEST.testCase26
                   BEST.testCase20
                   BEST.testCase17) -}
0346b48b54e13a961ea16a3e7f696e02
  testCase17 :: BEST.Expression
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (BEST.LiteralExpression BEST.testCase18) -}
494ba3b7ec9a7196428f9e3bcfdd02b9
  testCase18 :: BEST.Literal
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (BEST.IntLiteral BEST.testCase19) -}
57b3070e169b5db2fc68e4d754a25955
  testCase19 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (__integer 1) -}
da19beb0b65b4f8cb5d8e6e9ccd58242
  testCase2 :: [BEST.Case]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ BEST.Case
                   BEST.testCase3
                   (GHC.Types.[] @ BEST.Case)) -}
df70ba8a06af7dae5fd28cb51ca30d7e
  testCase20 :: [BEST.VarID]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ BEST.VarID
                   BEST.testCase24
                   BEST.testCase21) -}
1fc89939ecc25d711d2f6d8cdf999e83
  testCase21 :: [BEST.VarID]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ BEST.VarID
                   BEST.testCase22
                   (GHC.Types.[] @ BEST.VarID)) -}
bbe0176af50ab85a6250c04611c783f0
  testCase22 :: BEST.VarID
  {- Strictness: m,
     Unfolding: (BEST.VarID
                   BEST.testCase23
                   BEST.Value
                   BEST.testCase_list) -}
9e437d03158ba7e0b7aae8947b09b988
  testCase23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "xs"#) -}
388f4f539134a8d908c2e581de4e6d8d
  testCase24 :: BEST.VarID
  {- Strictness: m,
     Unfolding: (BEST.VarID
                   BEST.testCase25
                   BEST.Value
                   BEST.testCase9) -}
4b5dc9341ddef4f199242d5a152dd31a
  testCase25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "x"#) -}
9754caeae3c7f8591a747ff5f85cc38b
  testCase26 :: BEST.Pattern
  {- Strictness: m1,
     Unfolding: (BEST.DataPattern BEST.testCase31 BEST.testCase27) -}
66725246b1aeff05311fcc60e63b09ea
  testCase27 :: [BEST.Pattern]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ BEST.Pattern
                   BEST.testCase30
                   BEST.testCase28) -}
da656e5a31ff249b948dace4635c7cfc
  testCase28 :: [BEST.Pattern]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ BEST.Pattern
                   BEST.testCase29
                   (GHC.Types.[] @ BEST.Pattern)) -}
635cafa28d276bc561ff7274dfd1249e
  testCase29 :: BEST.Pattern
  {- Strictness: m2,
     Unfolding: (BEST.VariablePattern BEST.testCase22) -}
ff1926f7b1b890118f58424283464bc0
  testCase3 :: BEST.Case
  {- Strictness: m,
     Unfolding: (BEST.Case
                   BEST.testCase7
                   (GHC.Types.[] @ BEST.VarID)
                   BEST.testCase4) -}
61cd42bdb095c1a18d4f4edb18e03919
  testCase30 :: BEST.Pattern
  {- Strictness: m2,
     Unfolding: (BEST.VariablePattern BEST.testCase24) -}
b975e7f4c6cde23e367c9b2f496cd9ab
  testCase31 :: BEST.VarID
  {- Strictness: m,
     Unfolding: (BEST.VarID
                   BEST.testCase33
                   BEST.ValueCons
                   BEST.testCase_cons) -}
31059639e93d4a4f1d98b3d5514d2d49
  testCase32 :: BEST.CoreType
  {- Strictness: m3,
     Unfolding: (BEST.FunctionType
                   BEST.testCase_list
                   BEST.testCase_list) -}
be65b97956a196c291dd93d78560973d
  testCase33 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Cons"#) -}
621e0a4abc9027afceccc38f91e62655
  testCase34 :: BEST.Expression
  {- Strictness: m3,
     Unfolding: (BEST.ApplicationExpression
                   BEST.testCase36
                   BEST.testCase35) -}
b0ec0de9debfbe0b13ba3759381e49e6
  testCase35 :: BEST.Expression
  {- Strictness: m1,
     Unfolding: (BEST.VariableExpression BEST.testCase8) -}
25005026a874ee9e7ecd67638726f0ae
  testCase36 :: BEST.Expression
  {- Strictness: m3,
     Unfolding: (BEST.ApplicationExpression
                   BEST.testCase37
                   BEST.testCase17) -}
722c799752a9e16f87cd2fa746361c07
  testCase37 :: BEST.Expression
  {- Strictness: m1,
     Unfolding: (BEST.VariableExpression BEST.testCase31) -}
f4cb5357ea397a06dc5c0add00ab30cc
  testCase4 :: BEST.Expression
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (BEST.LiteralExpression BEST.testCase5) -}
6637524f29272d11108c615be8d0fa10
  testCase5 :: BEST.Literal
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (BEST.IntLiteral BEST.testCase6) -}
af2451a4a2fe4bbde765d4cde088968f
  testCase6 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (__integer 0) -}
b45f78810ffad74f12d79d206567266a
  testCase7 :: BEST.Pattern
  {- Strictness: m1,
     Unfolding: (BEST.DataPattern
                   BEST.testCase8
                   (GHC.Types.[] @ BEST.Pattern)) -}
f158929ce18a6e18c0c5f9a70248e9c9
  testCase8 :: BEST.VarID
  {- Strictness: m,
     Unfolding: (BEST.VarID
                   BEST.testCase15
                   BEST.ValueCons
                   BEST.testCase_list) -}
2dfc5cbc218f2423c4d9901966d86dfa
  testCase9 :: BEST.CoreType
  {- Strictness: m1,
     Unfolding: (BEST.TypeVariableType BEST.testCase10) -}
65be494379560a304349932352d22bea
  testCase_cons :: BEST.CoreType
  {- Strictness: m3,
     Unfolding: (BEST.FunctionType BEST.testCase9 BEST.testCase32) -}
1ae62a6063ae6349507b54d055c8b2ce
  testCase_list :: BEST.CoreType
  {- Strictness: m2,
     Unfolding: (BEST.ApplicationType BEST.testCase12 BEST.testCase9) -}
82713928c11ee71b6b1dd390b5f3d32b
  tshow :: BEST.CoreType -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U> -}
6160e5b094ae447d383e28735242cea0
  vshow :: BEST.Expression -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ v :: BEST.Expression ->
                 case v of wild {
                   DEFAULT
                   -> GHC.CString.unpackAppendCString#
                        "("#
                        (GHC.Base.++
                           @ GHC.Types.Char
                           (BEST.$fShowCase_$cshow wild)
                           BEST.vshow1)
                   BEST.VariableExpression ds -> BEST.$fShowCase_$cshow wild
                   BEST.LiteralExpression ds -> BEST.$fShowCase_$cshow wild }) -}
148954c9f0d9cabfa1efe6c8c3a546c8
  vshow1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ")"#) -}
instance GHC.Show.Show [BEST.Case] = BEST.$fShowCase
instance GHC.Show.Show [BEST.CoreType] = BEST.$fShowCoreType
instance GHC.Show.Show [BEST.Expression] = BEST.$fShowExpression
instance GHC.Show.Show [BEST.Literal] = BEST.$fShowLiteral
instance GHC.Show.Show [BEST.Namespace] = BEST.$fShowNamespace
instance GHC.Show.Show [BEST.Pattern] = BEST.$fShowPattern
instance GHC.Show.Show [BEST.VarID] = BEST.$fShowVarID
"SPEC/BEST $dmshowsPrec @ Literal" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                               BEST.Literal
  GHC.Show.$dmshowsPrec @ BEST.Literal $dShow
  = BEST.$fShowLiteral_$s$dmshowsPrec
"SPEC/BEST $dmshowsPrec @ VarID" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                             BEST.VarID
  GHC.Show.$dmshowsPrec @ BEST.VarID $dShow
  = BEST.$fShowVarID_$s$dmshowsPrec
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

