
==================== FINAL INTERFACE ====================
2016-09-10 22:52:06.870613 UTC

interface rhc_CuQgCuWWrTE7AdKLazyzq3:FESTtoBEST 7103
  interface hash: fa915c44d8439391858dca577d6b7e63
  ABI hash: c39a993336b6d37450e94eb7a53999a3
  export-list hash: a2747bfb3ae1d96509da90e905f4955d
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 962af636f8e927040c7daa9c21457292
  sig of: Nothing
  used TH splices: False
  where
exports:
  FESTtoBEST.encodeLiteral
  FESTtoBEST.injectVarName
  FESTtoBEST.injectVarNameType
  FESTtoBEST.runRenamer
  FESTtoBEST.simplify
  FESTtoBEST.simplifyCase
  FESTtoBEST.simplifyPattern
  FESTtoBEST.simplifyType
module dependencies: BEST FEST
package dependencies: base-4.8.2.0* ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:GHC.Generics
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  BEST 5846fc0efd6dd6a74aefc6842a78cbe0
  exports: ca330c3578890568bb9c25e367db6bdd
  ApplicationExpression 23fac8caa2b33f449e41d40ff2cb7bcc
  ApplicationType 81c588b639bee9b9909074d06557b06f
  Case a67622f862591971585331c5b0168f88
  Case 94ca032c2fcfc6806206786387eb4ea6
  CaseExpression fa1f00160ccd75da5cc98b3fa2a0314c
  CharLiteral bdc5f1ffd05e95dc6b9abf19fa391f8e
  CoreType 9e0bcaef8cb54897bb47d75b79bc270c
  DataPattern 4530ef520a4d8d217d76333bfb3cc054
  DefaultPattern cb735d4e2c1b4bf4c2ff33125b3b8a12
  Expression 94ca032c2fcfc6806206786387eb4ea6
  FracLiteral 38f54a53c52c36f346dc677dadc74cc0
  IntLiteral 336ccececc14c58a6740421dd37808a9
  LambdaExpression 1575431bacd90a3cd9c443463e75b433
  LitPattern c1f088da52fdd21291e69758ea0228b5
  Literal 99048baa76fed3514bf88a7a158d46e1
  LiteralExpression 1d1286aadcf9b6259174157429b1f424
  Pattern 1e055c4d98656846ebffe833082033bc
  StringLiteral ea5c1f4f6fb73504419178ed693138aa
  Type 538e33e771a2bdf67f1f76e293003e39
  TypeCons 08d258a49281b4b71253385b3d693c53
  TypeVariableType b78918ff4009b3a41f78b8079df1c76b
  TypedExpression 9a8452d20e8c6e2de285c4b0eac2f965
  UnknownType 4e2f4e158fa3bd722492c66ccbbe4788
  Value 45aa94c017e4239645fe0c108b5f5b7b
  ValueCons 614f564d2e4c13becdbc3f1c7d96c9c9
  VarID 65bfeec9ca229ce68e69f9b27b90611b
  VarID 9e0bcaef8cb54897bb47d75b79bc270c
  VariableExpression b3916a8813e3197eb5a5d68b1ccd3775
  VariablePattern 3f4860b7f3051948db8beb54ce43ed22
import  -/  FEST d41a04f214d21bb0de7f168b23b72746
  exports: a2b98597fb0c140033f1f212a638d7fb
  ApplicationExpression 161bc41315f909f113094784274698fc
  ApplicationTypeExpression 888657df59a7bbd62bda94d1a4a03107
  BlackHolePattern 4b4f1de834d0bea92b3650f01fc34041
  Case 53e653a5178723f58368ed595245bfd8
  Case 74bca47b1885d5da8e96bb94992f5fe9
  CaseExpression 884df522144cc23fa1e4553d5fb84f4e
  CharLiteral fc299d117d7432f328b255dd24f5a568
  ConstructedPattern 8f9693f59c8a59c0e02d279af8d2bbcf
  Declaration 8dd4ff25e2dfbe4b107d5a6803b228dd
  Expression 74bca47b1885d5da8e96bb94992f5fe9
  FracLiteral caeb024278af424670457e99c421dc0a
  IntLiteral 44481b34943ee2867680e66fd55d9d54
  LambdaExpression 6d7649a93ec7b18de04461ecc0b3e129
  Literal d40fbcff0c41141af2a3b3390c55f81b
  LiteralExpression c0532167f7ee2c109a992546c8491ccb
  LiteralPattern 1294d4279e2dbd5ee496aceae9b5765e
  Pattern b7ed2cd8bbc299368d4e67f077b04597
  StringLiteral 594d4b1fc79fe164a1a647fc8c056737
  Type 1781e541cff1b1cab2bfad255315759e
  TypeAnnotatedExpression e866bf5b579f679ee0f8a32e0e26ccd2
  TypeCons 055f3952056b8ad8b3592634337b3e34
  TypeExpression 45b1f5883cb2d7385b6a64406417599d
  TypeSignature 6549c6e82db49a824008029809eeaa51
  Value ca64255c9559270d243a1d3941533ff8
  ValueCons ecfd765793a6ba11fa8de5aa157c91ea
  VarName 61d3bef2fd8503f569e269bd6601c592
  VarName ec0e04f3757b9b2248122cc5aca779ad
  VarPattern fd7ebb70496c76207ba55834a3a98bee
  VariableExpression 33cc7215a56176104606c675caf677b0
  VariableTypeExpression f8a8d16371e21f6716f1d0f23a768758
484e9a36951053b63c79fdb6808e71dc
  $wsimplifyCase ::
    FEST.Pattern
    -> FEST.Expression
    -> (# BEST.Pattern, [BEST.VarID], BEST.Expression #)
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0] -}
ecd10e06dfbaf7eca5306c3c5a216e87
  encodeLiteral :: FEST.Literal -> BEST.Literal
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: FEST.Literal ->
                 case ds of wild {
                   FEST.StringLiteral s -> BEST.StringLiteral s
                   FEST.CharLiteral c -> BEST.CharLiteral c
                   FEST.IntLiteral i -> BEST.IntLiteral i
                   FEST.FracLiteral d -> BEST.FracLiteral d }) -}
aa4b8cf7f0d5551151817739105b1424
  injectVarName :: FEST.VarName -> BEST.VarID
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: FEST.VarName ->
                 case w of ww { FEST.VarName ww1 ww2 ->
                 case ww1 of wild {
                   FEST.TypeCons -> BEST.VarID ww2 BEST.TypeCons BEST.UnknownType
                   FEST.ValueCons -> BEST.VarID ww2 BEST.ValueCons BEST.UnknownType
                   FEST.Value -> BEST.VarID ww2 BEST.Value BEST.UnknownType
                   FEST.Type -> BEST.VarID ww2 BEST.Type BEST.UnknownType } }) -}
d85377cb93a95afcb0be80e2fc37d805
  injectVarNameType :: FEST.VarName -> BEST.CoreType -> BEST.VarID
  {- Arity: 2, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,U)><L,U>m,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: FEST.VarName t :: BEST.CoreType ->
                 case ds of wild { FEST.VarName ds1 s ->
                 case ds1 of wild1 {
                   FEST.TypeCons -> BEST.VarID s BEST.TypeCons t
                   FEST.ValueCons -> BEST.VarID s BEST.ValueCons t
                   FEST.Value -> BEST.VarID s BEST.Value t
                   FEST.Type -> BEST.VarID s BEST.Type t } }) -}
9624f42d77ac99baa7eb3828e6751e8f
  runRenamer :: [FEST.Declaration] -> [FEST.Declaration]
  {- Strictness: b,
     Unfolding: InlineRule (0, True, True)
                (GHC.Err.undefined @ ([FEST.Declaration] -> [FEST.Declaration])) -}
9e769edada8e14c085ad0cadaed1a7ae
  simplify :: FEST.Expression -> BEST.Expression
  {- Arity: 1, Strictness: <S,1*U> -}
acad2d94e6514dc68a9bd2142609c41f
  simplifyCase :: FEST.Case -> BEST.Case
  {- Arity: 1, Strictness: <S(SL),1*U(1*U,1*U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: FEST.Case ->
                 case w of ww { FEST.Case ww1 ww2 ->
                 case FESTtoBEST.$wsimplifyCase
                        ww1
                        ww2 of ww3 { (#,,#) ww4 ww5 ww6 ->
                 BEST.Case ww4 ww5 ww6 } }) -}
78029d8b621912e417819ad24074cd63
  simplifyPattern :: FEST.Pattern -> BEST.Pattern
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
c83b408914482765db8149db4986cdec
  simplifyType :: FEST.TypeExpression -> BEST.CoreType
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

