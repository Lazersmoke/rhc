
==================== FINAL INTERFACE ====================
2016-09-10 22:56:05.927218 UTC

interface main@main:Main 7103
  interface hash: ad52ce110b9d7bfafbc95e2c0f96ca19
  ABI hash: 81aac6265f8072e8bf980eecda0a159c
  export-list hash: e643ee11bab0af9bcbd442d5f7415b6d
  orphan hash: e268ecfa1f8b7649a40b92daa919f540
  flag hash: b39e706b59fcf38c15fdbd2ac8251476
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies:
package dependencies: HUnit-1.3.1.2@HUnit_AzBU5jSVcUy6oxicItOe0b
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA base-4.8.2.0
                      binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi
                      bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6
                      concatenative-1.0.1@conca_KzCba5lna9e6VWbajwmjbY
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      indents-0.3.3@inden_JUp6e9Mln336RRPS9FYajX integer-gmp-1.0.0.0
                      mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8
                      parsec-3.1.11@parse_AtBt9uDOS2NCyWnucTHV3y
                      pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC
                      rhc-0.1.0.0@rhc_CuQgCuWWrTE7AdKLazyzq3 template-haskell-2.10.0.0
                      text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Builder
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Show
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntMap.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntSet.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC:Text.PrettyPrint.HughesPJ
                         template-haskell-2.10.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
import  -/  HUnit-1.3.1.2@HUnit_AzBU5jSVcUy6oxicItOe0b:Test.HUnit 66bcf89478e54cab0bc320939852d08e
import  -/  HUnit-1.3.1.2@HUnit_AzBU5jSVcUy6oxicItOe0b:Test.HUnit.Base 05e3acf3b4a0039179fededbe30715ce
import  -/  HUnit-1.3.1.2@HUnit_AzBU5jSVcUy6oxicItOe0b:Test.HUnit.Text 134f59aba501c8e1716f6ae94740fd4c
import  -/  base-4.8.2.0:Data.Either e8724afd65fd432cfe9a54014f5f762d
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  rhc-0.1.0.0@rhc_CuQgCuWWrTE7AdKLazyzq3:BEST 5846fc0efd6dd6a74aefc6842a78cbe0
import  -/  rhc-0.1.0.0@rhc_CuQgCuWWrTE7AdKLazyzq3:FEST d41a04f214d21bb0de7f168b23b72746
import  -/  rhc-0.1.0.0@rhc_CuQgCuWWrTE7AdKLazyzq3:FESTtoBEST c39a993336b6d37450e94eb7a53999a3
import  -/  rhc-0.1.0.0@rhc_CuQgCuWWrTE7AdKLazyzq3:ParseFEST 91fe6c42c1842ccc997bdab31a64e873
0dfd8343556e96316cbb2fe21becb759
  $s$fEqEither ::
    GHC.Classes.Eq
      (Data.Either.Either Text.Parsec.Error.ParseError FEST.Declaration)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Either.Either
                       Text.Parsec.Error.ParseError FEST.Declaration)
                  (Data.Either.$fEqEither_$c==
                     @ Text.Parsec.Error.ParseError
                     @ FEST.Declaration
                     Text.Parsec.Error.$fEqParseError
                     FEST.$fEqDeclaration)
                  (Data.Either.$fEqEither_$c/=
                     @ Text.Parsec.Error.ParseError
                     @ FEST.Declaration
                     Text.Parsec.Error.$fEqParseError
                     FEST.$fEqDeclaration) -}
0b9f920d9f3ba2d4782b70305a9e1a33
  $s$fEqEither1 ::
    GHC.Classes.Eq
      (Data.Either.Either Text.Parsec.Error.ParseError FEST.VarName)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Either.Either Text.Parsec.Error.ParseError FEST.VarName)
                  (Data.Either.$fEqEither_$c==
                     @ Text.Parsec.Error.ParseError
                     @ FEST.VarName
                     Text.Parsec.Error.$fEqParseError
                     FEST.$fEqVarName)
                  (Data.Either.$fEqEither_$c/=
                     @ Text.Parsec.Error.ParseError
                     @ FEST.VarName
                     Text.Parsec.Error.$fEqParseError
                     FEST.$fEqVarName) -}
19af8abe5a793de932aca2396c5dcc7b
  $s$fShowEither ::
    GHC.Show.Show
      (Data.Either.Either Text.Parsec.Error.ParseError FEST.Declaration)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Either.Either
                       Text.Parsec.Error.ParseError FEST.Declaration)
                  (Data.Either.$fShowEither_$cshowsPrec
                     @ Text.Parsec.Error.ParseError
                     @ FEST.Declaration
                     Text.Parsec.Error.$fShowParseError
                     FEST.$fShowDeclaration)
                  (Data.Either.$fShowEither_$cshow
                     @ Text.Parsec.Error.ParseError
                     @ FEST.Declaration
                     Text.Parsec.Error.$fShowParseError
                     FEST.$fShowDeclaration)
                  Main.$s$fShowEither1 -}
aebc43bfc55d7f16b4b0d7cdac0bc0ca
  $s$fShowEither1 ::
    [Data.Either.Either Text.Parsec.Error.ParseError FEST.Declaration]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ eta :: [Data.Either.Either
                             Text.Parsec.Error.ParseError FEST.Declaration]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Data.Either.Either
                        Text.Parsec.Error.ParseError FEST.Declaration)
                   Main.$s$fShowEither2
                   eta
                   eta1) -}
d0144c6376a3c37f974554327a31fa01
  $s$fShowEither2 ::
    Data.Either.Either Text.Parsec.Error.ParseError FEST.Declaration
    -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w3 :: Data.Either.Either
                           Text.Parsec.Error.ParseError FEST.Declaration ->
                 Data.Either.$w$cshowsPrec
                   @ Text.Parsec.Error.ParseError
                   @ FEST.Declaration
                   Text.Parsec.Error.$fShowParseError
                   FEST.$fShowDeclaration
                   0
                   w3) -}
ffeee4bce6090aef76114e4097a0ce98
  $s$fShowEither3 ::
    GHC.Show.Show
      (Data.Either.Either Text.Parsec.Error.ParseError FEST.VarName)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Either.Either Text.Parsec.Error.ParseError FEST.VarName)
                  (Data.Either.$fShowEither_$cshowsPrec
                     @ Text.Parsec.Error.ParseError
                     @ FEST.VarName
                     Text.Parsec.Error.$fShowParseError
                     FEST.$fShowVarName)
                  (Data.Either.$fShowEither_$cshow
                     @ Text.Parsec.Error.ParseError
                     @ FEST.VarName
                     Text.Parsec.Error.$fShowParseError
                     FEST.$fShowVarName)
                  Main.$s$fShowEither4 -}
358f51ee9cc4af56dfe99825c0299f5f
  $s$fShowEither4 ::
    [Data.Either.Either Text.Parsec.Error.ParseError FEST.VarName]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ eta :: [Data.Either.Either
                             Text.Parsec.Error.ParseError FEST.VarName]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Data.Either.Either Text.Parsec.Error.ParseError FEST.VarName)
                   Main.$s$fShowEither5
                   eta
                   eta1) -}
d29df8de10c019a6cf818768d9913402
  $s$fShowEither5 ::
    Data.Either.Either Text.Parsec.Error.ParseError FEST.VarName
    -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w3 :: Data.Either.Either
                           Text.Parsec.Error.ParseError FEST.VarName ->
                 Data.Either.$w$cshowsPrec
                   @ Text.Parsec.Error.ParseError
                   @ FEST.VarName
                   Text.Parsec.Error.$fShowParseError
                   FEST.$fShowVarName
                   0
                   w3) -}
b88e3b98f7ab0d75ee983e07b34f8ef4
  main :: GHC.Types.IO Test.HUnit.Base.Counts
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1
                  `cast`
                (Sym (GHC.Types.NTCo:IO[0] <Test.HUnit.Base.Counts>_R)) -}
1cf5b937becfd71ff61b52115a6667e2
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Test.HUnit.Base.Counts #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Test.HUnit.Text.runTestTT3 of ww { Test.HUnit.Text.PutText ww1 ww2 ->
                 case Test.HUnit.Text.$wa
                        @ GHC.Types.Int
                        ww1
                        ww2
                        Main.main2
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) counts' ds ->
                 case ds of wild1 { GHC.Types.I# ds2 ->
                 case ds2 of ds3 {
                   DEFAULT
                   -> GHC.IO.failIO1
                        @ Test.HUnit.Base.Counts
                        Test.HUnit.Text.runTestTT2
                        ipv
                   0 -> (# ipv, counts' #) } } } } }) -}
0092cd66ecd11f89a33b6e4b1e9a0f45
  main10 :: Text.Parsec.Pos.SourcePos
  {- HasNoCafRefs,
     Unfolding: (Text.Parsec.Pos.SourcePos
                   (GHC.Types.[] @ GHC.Types.Char)
                   1
                   1) -}
97dde89aae757c388bcecc72dd03638c
  main11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "data List a where\n\
                   \  Cons :: F a (F (List a) (List a))\n\
                   \  Nil :: List a\n"#) -}
e3bf13be22bd36c0485e7d8f6a8fabb2
  main12 ::
    Data.Either.Either Text.Parsec.Error.ParseError FEST.Declaration
  {- Unfolding: (Data.Either.Right
                   @ Text.Parsec.Error.ParseError
                   @ FEST.Declaration
                   Main.main13) -}
84d4321ed4a68af9fe43726343078b08
  main13 :: FEST.Declaration
  {- Unfolding: (FEST.DataTypeDeclaration
                   Main.main25
                   Main.main23
                   Main.main39
                   Main.main14) -}
f739bf1b0a2da45d9937bacd637780c7
  main14 :: [FEST.Declaration]
  {- Unfolding: (GHC.Types.:
                   @ FEST.Declaration
                   Main.main28
                   Main.main15) -}
ee2f58e885d1c8920864ca1479ab4e80
  main15 :: [FEST.Declaration]
  {- Unfolding: (GHC.Types.:
                   @ FEST.Declaration
                   Main.main16
                   (GHC.Types.[] @ FEST.Declaration)) -}
c9652d2b69607fc483a9ba146d3483c4
  main16 :: FEST.Declaration
  {- Unfolding: (FEST.TypeSignatureDeclaration
                   Main.main26
                   Main.main17) -}
84d30b9e46f136c5dbcba3b807e4a9c6
  main17 :: FEST.TypeSignature
  {- Unfolding: (FEST.TypeSignature Main.main25 Main.main18) -}
0fbdc80c4f3250d470e1e2f2a10e9f8d
  main18 :: FEST.TypeExpression
  {- Unfolding: (FEST.ApplicationTypeExpression
                   Main.main22
                   Main.main19) -}
88cfbca763e9aa2080fa4d5463fce3ee
  main19 :: FEST.TypeExpression
  {- Unfolding: (FEST.VariableTypeExpression Main.main20) -}
3083e9cb55136c6bb8d68c664f598393
  main2 :: Test.HUnit.Base.Test
  {- Unfolding: (Test.HUnit.Base.TestList Main.main3) -}
aa036084fae9043e9e58dd0d803204cc
  main20 :: FEST.VarName
  {- Unfolding: (FEST.VarName FEST.Type Main.main21) -}
be8dd741280da9b887617e859ca49329
  main21 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "a"#) -}
67a72d21650036ed06749fa7baddb9cc
  main22 :: FEST.TypeExpression
  {- Unfolding: (FEST.VariableTypeExpression Main.main23) -}
45fafa3575618c82e37e9b7d79e44952
  main23 :: FEST.VarName
  {- Unfolding: (FEST.VarName FEST.TypeCons Main.main24) -}
17dc57e45fbb6af7a92fa95cb8109f19
  main24 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "List"#) -}
b971ee72ff53061ec955765d5bb5dd7f
  main25 :: FEST.Context
  {- HasNoCafRefs,
     Unfolding: (FEST.Context
                   (GHC.Types.[] @ FEST.ContextualAssertation)) -}
35f81f2c08e13865455368ed4d2f0e5b
  main26 :: FEST.VarName
  {- Unfolding: (FEST.VarName FEST.ValueCons Main.main27) -}
e438ff217174bf9253e187141b982441
  main27 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Nil"#) -}
98a1c8467cd856369bfa79cef84bac4d
  main28 :: FEST.Declaration
  {- Unfolding: (FEST.TypeSignatureDeclaration
                   Main.main37
                   Main.main29) -}
fa8c9aa7f6fbd9c06e5642d1df46caef
  main29 :: FEST.TypeSignature
  {- Unfolding: (FEST.TypeSignature Main.main25 Main.main30) -}
99c342ba7c04dca3d5fd1e36676fc0ca
  main3 :: [Test.HUnit.Base.Test]
  {- Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.main69
                   Main.main4) -}
6c3802133ff37e2cdc6cd59c5b54c993
  main30 :: FEST.TypeExpression
  {- Unfolding: (FEST.ApplicationTypeExpression
                   Main.main36
                   Main.main31) -}
6a9014fb5b4462de59ebfe2bdfbfe71c
  main31 :: FEST.TypeExpression
  {- Unfolding: (FEST.ApplicationTypeExpression
                   Main.main32
                   Main.main18) -}
52d23f7bbb3cf41cfd0739b48ad7d45c
  main32 :: FEST.TypeExpression
  {- Unfolding: (FEST.ApplicationTypeExpression
                   Main.main33
                   Main.main18) -}
fc0b4414c0bc26d439a7906b5fa39d6d
  main33 :: FEST.TypeExpression
  {- Unfolding: (FEST.VariableTypeExpression Main.main34) -}
1c3a3f0fa7fc438c6551d4c1a33c6cda
  main34 :: FEST.VarName
  {- Unfolding: (FEST.VarName FEST.TypeCons Main.main35) -}
9fa81468053b9e8608464e2997230692
  main35 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "F"#) -}
9007b9ea08d71014804d63f513997280
  main36 :: FEST.TypeExpression
  {- Unfolding: (FEST.ApplicationTypeExpression
                   Main.main33
                   Main.main19) -}
a598ef9c8036de4103fc41051f72b9e7
  main37 :: FEST.VarName
  {- Unfolding: (FEST.VarName FEST.ValueCons Main.main38) -}
393fa179e2afc7da4a9083b59496508e
  main38 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Cons"#) -}
1a5d3670b0ca3366b51921147ef152e7
  main39 :: [FEST.VarName]
  {- Unfolding: (GHC.Types.:
                   @ FEST.VarName
                   Main.main20
                   (GHC.Types.[] @ FEST.VarName)) -}
8ffd3dbaf37fe6157b8c02a13fe49a2b
  main4 :: [Test.HUnit.Base.Test]
  {- Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.main54
                   Main.main5) -}
03590e83e5e2f9e8c046c9004340cc71
  main40 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.main41) -}
6c40b62757d29a8733d2242e7c3bee75
  main41 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@=?2
                   Main.main42) -}
2daa7eaabb35b5b8b2a60471f7fcc084
  main42 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.~=?1
                   Main.main43) -}
2aad67754005b6b1bfc4a5e59c887241
  main43 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.main44
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
f9f18b6fe7db900433700434a26313b2
  main44 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.main52, Main.main45)) -}
1a5f82a57df8f2be0cb3c9028a91980a
  main45 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.main51
                   Main.main50
                   Main.main49
                   Main.main48
                   Main.main47
                   Main.main48
                   Main.main46) -}
648529fbeaef4ed4ede6642daead242b
  main46 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 60) -}
70f0c02bee8118cf76b9ec937f1ff229
  main47 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 57) -}
de4989d9d130462982e06b413109efa8
  main48 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 14) -}
778d20b9ab54ebd4a4871394c1b5c533
  main49 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "test/Spec.hs"#) -}
707717f3be1244fb87e9a2427647207b
  main5 :: [Test.HUnit.Base.Test]
  {- Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.main6
                   (GHC.Types.[] @ Test.HUnit.Base.Test)) -}
7973ca003ede80c887249825a29d3fce
  main50 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Main"#) -}
2319df684bb7c75fc9b57b4663048aa5
  main51 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "main"#) -}
79da84a4d54dd6aa731cba368c358835
  main52 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "~=?"#) -}
57cf6ebc93e646f463025c660d1ba46a
  main53 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "dataDecl parsing invalid"#) -}
b61ce52047ae33c22d828d0e6c2ace77
  main54 :: Test.HUnit.Base.Test
  {- Unfolding: (Test.HUnit.Base.TestLabel
                   Main.main68
                   Main.main55) -}
2a419da561173ad84f6ff36997d418bf
  main55 :: Test.HUnit.Base.Test
  {- Unfolding: (Test.HUnit.Base.TestCase
                   Main.main56 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
d85a3ce32b5bd5058e1a38a1cec61a0a
  main56 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ GHC.Types.Bool
                   Main.main59
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   GHC.Classes.$fEqBool
                   GHC.Show.$fShowBool
                   (GHC.Types.[] @ GHC.Types.Char)
                   GHC.Types.True
                   Main.main57
                   eta2) -}
1ff2c039e1cdfe77c6b9d2635a4b2204
  main57 :: GHC.Types.Bool
  {- Unfolding: (case ((Text.Parsec.Prim.runPT
                          @ GHC.Base.String
                          @ ()
                          @ (Control.Monad.Trans.State.Lazy.StateT
                               Text.Parsec.Pos.SourcePos Data.Functor.Identity.Identity)
                          @ FEST.VarName
                          @ GHC.Types.Char
                          (ParseFEST.$s$fStream[]mtok @ GHC.Types.Char)
                          ParseFEST.valueVar1
                            `cast`
                          (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                                    <[GHC.Types.Char]>_R
                                    <()>_R
                                    <Control.Monad.Trans.State.Lazy.StateT
                                       Text.Parsec.Pos.SourcePos Data.Functor.Identity.Identity>_R
                                    <FEST.VarName>_R))
                          GHC.Tuple.()
                          (GHC.Types.[] @ GHC.Types.Char)
                          Main.main58)
                         `cast`
                       (Control.Monad.Trans.State.Lazy.NTCo:StateT[0]
                            <Text.Parsec.Pos.SourcePos>_N
                            <Data.Functor.Identity.Identity>_R
                            <Data.Either.Either Text.Parsec.Error.ParseError FEST.VarName>_N)
                         Main.main10)
                        `cast`
                      (Data.Functor.Identity.NTCo:Identity[0]
                           <(Data.Either.Either Text.Parsec.Error.ParseError FEST.VarName,
                             Text.Parsec.Pos.SourcePos)>_R) of wild { (,) x ds1 ->
                 case x of wild1 {
                   Data.Either.Left x1 -> GHC.Types.True
                   Data.Either.Right y -> GHC.Types.False } }) -}
4518608354fb9b67db77ef0d83ebe905
  main58 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "'asdf"#) -}
d0630b6f46cd7978b9c69f10ff5f6745
  main59 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.main60) -}
dc186271b794858e71090856671f1263
  main6 :: Test.HUnit.Base.Test
  {- Unfolding: (Test.HUnit.Base.TestLabel Main.main53 Main.main7) -}
69a86f715404f0851427f5ed6c116d1a
  main60 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@=?2
                   Main.main61) -}
a6675fe61ec504b1ec73cfb7b1a695b9
  main61 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.~=?1
                   Main.main62) -}
c4052b0483e5edd7c5d9a0577c9cfe60
  main62 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.main63
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
8068e4a7d15dba113f58abaa999ffaad
  main63 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.main52, Main.main64)) -}
3825d4fa4f5ce07371587b0192d78f1c
  main64 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.main51
                   Main.main50
                   Main.main49
                   Main.main67
                   Main.main66
                   Main.main67
                   Main.main65) -}
23af27096d389b670bd3f580685c81c2
  main65 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 41) -}
5a0fe38bc720dc03b3a74bb4e3741876
  main66 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 38) -}
0f05067918b64cd0a67c0d7293025864
  main67 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 13) -}
f2ea71a4d2d5336de1d170fc234db96e
  main68 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "varName parsing invalid"#) -}
83e237d0a2d4d40dc42d7a77117a5bab
  main69 :: Test.HUnit.Base.Test
  {- Unfolding: (Test.HUnit.Base.TestLabel
                   Main.main85
                   Main.main70) -}
93cfef26850adc161ce610f68c92a79c
  main7 :: Test.HUnit.Base.Test
  {- Unfolding: (Test.HUnit.Base.TestCase
                   Main.main8 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
ddb2917340f1e33402acfcdb816aa00e
  main70 :: Test.HUnit.Base.Test
  {- Unfolding: (Test.HUnit.Base.TestCase
                   Main.main71 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
c2f02ddebe187541e9abbdc9e26f2bde
  main71 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ (Data.Either.Either Text.Parsec.Error.ParseError FEST.VarName)
                   Main.main76
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   Main.$s$fEqEither1
                   Main.$s$fShowEither3
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.main74
                   Main.main72
                   eta2) -}
7b3611e8e8c11ec155d35e78331a4d66
  main72 ::
    Data.Either.Either Text.Parsec.Error.ParseError FEST.VarName
  {- Unfolding: (case ((Text.Parsec.Prim.runPT
                          @ GHC.Base.String
                          @ ()
                          @ (Control.Monad.Trans.State.Lazy.StateT
                               Text.Parsec.Pos.SourcePos Data.Functor.Identity.Identity)
                          @ FEST.VarName
                          @ GHC.Types.Char
                          (ParseFEST.$s$fStream[]mtok @ GHC.Types.Char)
                          ParseFEST.valueVar1
                            `cast`
                          (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                                    <[GHC.Types.Char]>_R
                                    <()>_R
                                    <Control.Monad.Trans.State.Lazy.StateT
                                       Text.Parsec.Pos.SourcePos Data.Functor.Identity.Identity>_R
                                    <FEST.VarName>_R))
                          GHC.Tuple.()
                          (GHC.Types.[] @ GHC.Types.Char)
                          Main.main73)
                         `cast`
                       (Control.Monad.Trans.State.Lazy.NTCo:StateT[0]
                            <Text.Parsec.Pos.SourcePos>_N
                            <Data.Functor.Identity.Identity>_R
                            <Data.Either.Either Text.Parsec.Error.ParseError FEST.VarName>_N)
                         Main.main10)
                        `cast`
                      (Data.Functor.Identity.NTCo:Identity[0]
                           <(Data.Either.Either Text.Parsec.Error.ParseError FEST.VarName,
                             Text.Parsec.Pos.SourcePos)>_R) of wild { (,) x ds1 ->
                 x }) -}
3f9325d5c3ad901583e4cbac2a383b8e
  main73 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "asdf"#) -}
ae7087cfb8c9b77a74b49906c5cba9ff
  main74 ::
    Data.Either.Either Text.Parsec.Error.ParseError FEST.VarName
  {- Unfolding: (Data.Either.Right
                   @ Text.Parsec.Error.ParseError
                   @ FEST.VarName
                   Main.main75) -}
a102ddbb79e292363b49ee4476739430
  main75 :: FEST.VarName
  {- Unfolding: (FEST.VarName FEST.Value Main.main73) -}
fcf8e2c77532590430af6f963a4672bb
  main76 :: GHC.Stack.CallStack
  {- Unfolding: (GHC.Stack.CallStack Main.main77) -}
c78af7f08d9aeeb4d069671a77017383
  main77 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.@=?2
                   Main.main78) -}
e2e1c32bac3313ff7bcbd36a97e988d0
  main78 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Test.HUnit.Base.~=?1
                   Main.main79) -}
cd23b859ab92cb13e4a52a0be6671ac6
  main79 :: [([GHC.Types.Char], GHC.SrcLoc.SrcLoc)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
                   Main.main80
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.SrcLoc.SrcLoc))) -}
9cd76d8d2f7aa828dda2e9b3b7c38769
  main8 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (\ eta2 :: GHC.Prim.State#
                             GHC.Prim.RealWorld[OneShot] ->
                 Test.HUnit.Base.@=?7
                   @ (Data.Either.Either
                        Text.Parsec.Error.ParseError FEST.Declaration)
                   Main.main40
                     `cast`
                   (Sym (GHC.IP.NTCo:IP[0] <"loc">_N <GHC.Stack.CallStack>_N))
                   Main.$s$fEqEither
                   Main.$s$fShowEither
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.main12
                   Main.main9
                   eta2) -}
f5250aa3df758029b16c81bdf82bff06
  main80 :: ([GHC.Types.Char], GHC.SrcLoc.SrcLoc)
  {- Unfolding: ((Main.main52, Main.main81)) -}
c31eaf047697b32db40061dc854cab11
  main81 :: GHC.SrcLoc.SrcLoc
  {- Unfolding: (GHC.SrcLoc.SrcLoc
                   Main.main51
                   Main.main50
                   Main.main49
                   Main.main84
                   Main.main83
                   Main.main84
                   Main.main82) -}
542ff8ce66442ff71851ac1e50a0a807
  main82 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 61) -}
d5a02e3a1367913ec63e1aeef8d2338b
  main83 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 58) -}
d032b822b43a227496b55803148d67fe
  main84 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 12) -}
8bb93975c3e026949574e439e336aad6
  main85 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "varName parsing"#) -}
30fae66da1c0fd271fd495157bc62714
  main86 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Test.HUnit.Base.Counts #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ Test.HUnit.Base.Counts
                   Main.main1
                     `cast`
                   (Sym (GHC.Types.NTCo:IO[0] <Test.HUnit.Base.Counts>_R))) -}
29eb5549314156df942b6a9642af9724
  main9 ::
    Data.Either.Either Text.Parsec.Error.ParseError FEST.Declaration
  {- Unfolding: (case ((Text.Parsec.Prim.runPT
                          @ GHC.Base.String
                          @ ()
                          @ (Control.Monad.Trans.State.Lazy.StateT
                               Text.Parsec.Pos.SourcePos Data.Functor.Identity.Identity)
                          @ FEST.Declaration
                          @ GHC.Types.Char
                          (ParseFEST.$s$fStream[]mtok @ GHC.Types.Char)
                          ParseFEST.declaration1
                            `cast`
                          (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                                    <GHC.Base.String>_R
                                    <()>_R
                                    <Control.Monad.Trans.State.Lazy.State
                                       Text.Parsec.Pos.SourcePos>_R
                                    <FEST.Declaration>_R))
                          GHC.Tuple.()
                          (GHC.Types.[] @ GHC.Types.Char)
                          Main.main11)
                         `cast`
                       (Control.Monad.Trans.State.Lazy.NTCo:StateT[0]
                            <Text.Parsec.Pos.SourcePos>_N
                            <Data.Functor.Identity.Identity>_R
                            <Data.Either.Either
                               Text.Parsec.Error.ParseError FEST.Declaration>_N)
                         Main.main10)
                        `cast`
                      (Data.Functor.Identity.NTCo:Identity[0]
                           <(Data.Either.Either Text.Parsec.Error.ParseError FEST.Declaration,
                             Text.Parsec.Pos.SourcePos)>_R) of wild { (,) x ds1 ->
                 x }) -}
"SPEC/Main $fEqEither @ ParseError @ Declaration" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                            Text.Parsec.Error.ParseError
                                                                  $dEq1 :: GHC.Classes.Eq
                                                                             FEST.Declaration
  Data.Either.$fEqEither @ Text.Parsec.Error.ParseError
                         @ FEST.Declaration
                         $dEq
                         $dEq1
  = Main.$s$fEqEither
"SPEC/Main $fEqEither @ ParseError @ VarName" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                        Text.Parsec.Error.ParseError
                                                              $dEq1 :: GHC.Classes.Eq FEST.VarName
  Data.Either.$fEqEither @ Text.Parsec.Error.ParseError
                         @ FEST.VarName
                         $dEq
                         $dEq1
  = Main.$s$fEqEither1
"SPEC/Main $fShowEither @ ParseError @ Declaration" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                                Text.Parsec.Error.ParseError
                                                                    $dShow1 :: GHC.Show.Show
                                                                                 FEST.Declaration
  Data.Either.$fShowEither @ Text.Parsec.Error.ParseError
                           @ FEST.Declaration
                           $dShow
                           $dShow1
  = Main.$s$fShowEither
"SPEC/Main $fShowEither @ ParseError @ VarName" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                            Text.Parsec.Error.ParseError
                                                                $dShow1 :: GHC.Show.Show
                                                                             FEST.VarName
  Data.Either.$fShowEither @ Text.Parsec.Error.ParseError
                           @ FEST.VarName
                           $dShow
                           $dShow1
  = Main.$s$fShowEither3
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

